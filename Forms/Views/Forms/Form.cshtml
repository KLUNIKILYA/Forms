@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<body>
    <div class="container py-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1>Заполнение формы</h1>
            <div class="d-flex align-items-center">
                <div class="me-3">
                    <span class="badge bg-primary">Не отправлено</span>
                </div>
                <button type="button" class="btn btn-outline-secondary me-2" id="saveDraftBtn">
                    <i class="bi bi-save"></i> Сохранить черновик
                </button>
                <button type="button" class="btn btn-primary" id="submitFormBtn">
                    <i class="bi bi-send"></i> Отправить
                </button>
            </div>
        </div>

        <div class="card mb-4">
            <div class="card-body">
                <h2 class="card-title mb-3" id="formTitle">Название формы</h2>
                <div class="card-text mb-4" id="formDescription">
                    Описание формы будет здесь...
                </div>

                <form id="responseForm">
                    <div id="questionsContainer">
                        <div class="text-center py-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Загрузка...</span>
                            </div>
                            <p class="mt-3">Загрузка формы</p>
                        </div>
                    </div>
                </form>
            </div>
        </div>

        <div class="d-flex justify-content-between mt-4">
            <button type="button" class="btn btn-outline-secondary" id="backBtn">
                <i class="bi bi-arrow-left"></i> Назад
            </button>
            <button type="button" class="btn btn-primary" id="submitFormBtnBottom">
                <i class="bi bi-send"></i> Отправить
            </button>
        </div>
    </div>

    <div class="modal fade" id="submitConfirmationModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Подтверждение отправки</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <p>Вы уверены, что хотите отправить форму? После отправки вы не сможете изменить ответы.</p>
                    <div class="alert alert-warning mt-3" id="requiredFieldsWarning" style="display: none;">
                        <i class="bi bi-exclamation-triangle"></i> Пожалуйста, заполните все обязательные поля.
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Отмена</button>
                    <button type="button" class="btn btn-primary" id="confirmSubmitBtn">Отправить</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const formTitle = document.getElementById('formTitle');
            const formDescription = document.getElementById('formDescription');
            const questionsContainer = document.getElementById('questionsContainer');
            const responseForm = document.getElementById('responseForm');
            const submitFormBtn = document.getElementById('submitFormBtn');
            const submitFormBtnBottom = document.getElementById('submitFormBtnBottom');
            const saveDraftBtn = document.getElementById('saveDraftBtn');
            const backBtn = document.getElementById('backBtn');
            const submitConfirmationModal = new bootstrap.Modal(document.getElementById('submitConfirmationModal'));
            const confirmSubmitBtn = document.getElementById('confirmSubmitBtn');
            const requiredFieldsWarning = document.getElementById('requiredFieldsWarning');

            let formData = {};
            let responseData = {};

            loadFormData();

            initEventListeners();

            function initEventListeners() {
                submitFormBtn.addEventListener('click', handleSubmitClick);
                submitFormBtnBottom.addEventListener('click', handleSubmitClick);
                confirmSubmitBtn.addEventListener('click', submitForm);
                saveDraftBtn.addEventListener('click', saveDraft);
                backBtn.addEventListener('click', function () {
                    if (confirm('Все несохраненные изменения будут потеряны. Продолжить?')) {
                        history.back();
                    }
                });
            }

            async function loadFormData() {
                try {
                    const formId = getFormIdFromUrl(); 
                    const response = await fetch(`/Forms/GetFormForFilling/${formId}`, {
                        headers: {
                            'Accept': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        if (response.status === 404) {
                             throw new Error(`Форма с ID ${formId} не найдена.`);
                        } else if (response.status === 403) {
                             throw new Error(`У вас нет доступа к этой форме.`);
                        }
                        throw new Error(`Ошибка загрузки формы: ${response.status} ${response.statusText}`);
                    }

                    const formDataFromServer = await response.json();

                    formData = {
                        id: formDataFromServer.id,
                        title: formDataFromServer.template.title,
                        description: formDataFromServer.template.description,
                        questions: formDataFromServer.template.questions.map(question => ({
                            id: question.id,
                            text: question.title,
                            description: question.description,
                            // ИЗМЕНЕНО: Упрощено, тип уже является нужной строкой
                            type: question.type,
                            isRequired: question.isRequired,
                            // ИЗМЕНЕНО: `question.options` уже является массивом строк, дополнительное .map не нужно
                            options: question.options
                        }))
                    };

                    // Проверяем, есть ли сохраненный черновик
                    responseData = {
                        formId: formData.id,
                    // Используем ответы с сервера. Если их нет (новая форма), будет пустой объект.
                        answers: formDataFromServer.answers || {}
                    };

                    renderForm();
                } catch (error) {
                    console.error('Ошибка загрузки формы:', error);
                    showErrorToUser(error.message || 'Не удалось загрузить форму. Пожалуйста, попробуйте позже.');
                }
            }

            function showErrorToUser(message) {
                questionsContainer.innerHTML = `
                    <div class="alert alert-danger">
                        <i class="bi bi-exclamation-triangle"></i> ${message}
                        <button class="btn btn-sm btn-outline-secondary mt-2" onclick="window.location.reload()">
                            <i class="bi bi-arrow-clockwise"></i> Попробовать снова
                        </button>
                    </div>
                `;
            }

            function getFormIdFromUrl() {
                const pathParts = window.location.pathname.split('/');
                const lastPart = pathParts.filter(p => p).pop();
                return parseInt(lastPart, 10);
            }

            function renderForm() {
                formTitle.textContent = formData.title;
                formDescription.innerHTML = marked.parse(formData.description || "");
                questionsContainer.innerHTML = '';

                formData.questions.forEach(question => {
                    const questionElement = createQuestionElement(question);
                    questionsContainer.appendChild(questionElement);
                    if (responseData.answers[question.id] !== undefined) {
                        fillQuestionWithAnswer(questionElement, question, responseData.answers[question.id]);
                    }
                });
            }

            function createQuestionElement(question) {
                const questionDiv = document.createElement('div');
                questionDiv.className = 'mb-4 question-item';
                questionDiv.dataset.questionId = question.id;
                questionDiv.dataset.questionType = question.type;
                questionDiv.dataset.isRequired = question.isRequired;

                const questionLabel = document.createElement('label');
                questionLabel.className = 'form-label fw-bold';
                questionLabel.textContent = question.text;
                if (question.isRequired) {
                    questionLabel.innerHTML += ' <span class="text-danger">*</span>';
                }
                questionDiv.appendChild(questionLabel);

                if (question.description) {
                    const descriptionDiv = document.createElement('div');
                    descriptionDiv.className = 'text-muted small mb-2';
                    descriptionDiv.innerHTML = marked.parse(question.description);
                    questionDiv.appendChild(descriptionDiv);
                }

                const answerField = createAnswerField(question);
                questionDiv.appendChild(answerField);

                return questionDiv;
            }

            function createAnswerField(question) {
                switch (question.type) {
                    case 'SingleLine':
                        return createTextInput(question, 'text');
                    case 'MultiLine':
                        return createTextareaInput(question);
                    case 'Integer':
                        return createNumberInput(question);
                    case 'Checkbox':
                        return createCheckboxOptions(question);
                    case 'Dropdown':
                        return createDropdownOptions(question);
                    default:
                        return createTextInput(question, 'text');
                }
            }

            function createTextInput(question, type = 'text') {
                const input = document.createElement('input');
                input.type = type;
                input.className = 'form-control';
                input.required = question.isRequired;
                input.dataset.questionId = question.id;
                return input;
            }

            function createTextareaInput(question) {
                const textarea = document.createElement('textarea');
                textarea.className = 'form-control';
                textarea.rows = 3;
                textarea.dataset.questionId = question.id;
                return textarea;
            }

            function createNumberInput(question) {
                const input = document.createElement('input');
                input.type = 'number';
                input.className = 'form-control';
                input.required = question.isRequired;
                input.dataset.questionId = question.id;
                return input;
            }

            function createCheckboxOptions(question) {
                const container = document.createElement('div');
                container.className = 'options-container';

                question.options.forEach((option, index) => {
                    const optionDiv = document.createElement('div');
                    optionDiv.className = 'form-check';

                    const input = document.createElement('input');
                    input.className = 'form-check-input';
                    input.type = 'checkbox';
                    input.id = `q${question.id}_opt${index}`;
                    input.value = option;
                    input.dataset.questionId = question.id;

                    const label = document.createElement('label');
                    label.className = 'form-check-label';
                    label.htmlFor = input.id;
                    label.textContent = option;

                    optionDiv.appendChild(input);
                    optionDiv.appendChild(label);
                    container.appendChild(optionDiv);
                });
                return container;
            }

            function createDropdownOptions(question) {
                const select = document.createElement('select');
                select.className = 'form-select';
                select.required = question.isRequired;
                select.dataset.questionId = question.id;

                const defaultOption = document.createElement('option');
                defaultOption.value = '';
                defaultOption.textContent = '-- Выберите вариант --';
                if (question.isRequired) {
                    defaultOption.disabled = true;
                }
                select.appendChild(defaultOption);

                question.options.forEach(option => {
                    const optionElement = document.createElement('option');
                    optionElement.value = option;
                    optionElement.textContent = option;
                    select.appendChild(optionElement);
                });

                return select;
            }

            function fillQuestionWithAnswer(questionElement, question, answer) {
                switch (question.type) {
                    case 'SingleLine':
                    case 'MultiLine':
                    case 'Integer':
                        questionElement.querySelector('input, textarea').value = answer;
                        break;
                    case 'Dropdown':
                        questionElement.querySelector('select').value = answer;
                        break;
                    case 'Checkbox':
                        if (Array.isArray(answer)) {
                            answer.forEach(value => {
                                const checkbox = questionElement.querySelector(`input[value="${value}"]`);
                                if (checkbox) checkbox.checked = true;
                            });
                        }
                        break;
                }
            }

            function handleSubmitClick() {
                collectAnswers();
                const missingRequiredFields = checkRequiredFields();

                if (missingRequiredFields.length > 0) {
                    requiredFieldsWarning.textContent = 'Пожалуйста, заполните все обязательные поля, отмеченные звездочкой.';
                    requiredFieldsWarning.style.display = 'block';
                    // В модальном окне не даем нажать "Отправить"
                    confirmSubmitBtn.disabled = true;
                    scrollToFirstMissingField(missingRequiredFields[0]);
                } else {
                    requiredFieldsWarning.style.display = 'none';
                    confirmSubmitBtn.disabled = false;
                }

                submitConfirmationModal.show();
            }

            function collectAnswers() {
                responseData.answers = {};
                document.querySelectorAll('.question-item').forEach(questionElement => {
                    const questionId = parseInt(questionElement.dataset.questionId);
                    const questionType = questionElement.dataset.questionType;
                    let answer;

                    switch (questionType) {
                        case 'SingleLine':
                        case 'MultiLine':
                        case 'Integer':
                            answer = questionElement.querySelector('input, textarea').value;
                            break;
                        case 'Dropdown':
                            answer = questionElement.querySelector('select').value;
                            break;
                        case 'Checkbox':
                            answer = Array.from(questionElement.querySelectorAll('input[type="checkbox"]:checked')).map(cb => cb.value);
                            break;
                    }

                    if ((Array.isArray(answer) && answer.length > 0) || (typeof answer === 'string' && answer.trim() !== '')) {
                        responseData.answers[questionId] = answer;
                    }
                });
            }

            function checkRequiredFields() {
                const missingFields = [];
                document.querySelectorAll('.question-item[data-is-required="true"]').forEach(questionElement => {
                    const questionId = parseInt(questionElement.dataset.questionId);
                    let isValid = responseData.answers[questionId] !== undefined;
                    if(Array.isArray(responseData.answers[questionId]) && responseData.answers[questionId].length === 0){
                        isValid = false;
                    }
                     if(typeof responseData.answers[questionId] === 'string' && responseData.answers[questionId].trim() === ''){
                        isValid = false;
                    }

                    if (!isValid) {
                        missingFields.push(questionId);
                        questionElement.classList.add('border', 'border-danger', 'p-3', 'rounded');
                    } else {
                        questionElement.classList.remove('border', 'border-danger', 'p-3', 'rounded');
                    }
                });
                return missingFields;
            }

            function scrollToFirstMissingField(questionId) {
                const questionElement = document.querySelector(`.question-item[data-question-id="${questionId}"]`);
                if (questionElement) {
                    questionElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                }
            }

            function saveDraft() {
                collectAnswers();
                localStorage.setItem(`formDraft_${formData.id}`, JSON.stringify(responseData));

                const alert = document.createElement('div');
                alert.className = 'alert alert-success position-fixed top-0 end-0 m-3';
                alert.style.zIndex = '1100';
                alert.innerHTML = '<i class="bi bi-check-circle"></i> Черновик успешно сохранен';
                document.body.appendChild(alert);

                setTimeout(() => {
                    alert.remove();
                }, 3000);
            }

            async function submitForm() {
                submitConfirmationModal.hide();

            // Показываем спиннер на кнопке отправки для обратной связи
                confirmSubmitBtn.disabled = true;
                confirmSubmitBtn.innerHTML = `
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    Отправка...
                `;

            // Убедимся, что все ответы собраны перед отправкой
                collectAnswers();

                try {
                    const response = await fetch('/Forms/SubmitForm', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        // Если у вас есть анти-CSRF токен, его нужно добавить сюда
                        },
                        body: JSON.stringify(responseData) // responseData имеет структуру { formId: ..., answers: {...} }
                    });

                    if (!response.ok) {
                        const errorText = await response.text();
                        throw new Error(`Ошибка сервера: ${response.status}. ${errorText}`);
                    }

                    const result = await response.json();
                    console.log('Ответ сервера:', result);

                // Успешная отправка: удаляем черновик
                    localStorage.removeItem(`formDraft_${formData.id}`);


                // Показываем сообщение об успехе
                    alert('Форма успешно отправлена!');


                // Перенаправляем пользователя, например, на страницу "Мои формы"
                    window.location.href = '/Templates/Index'; // Замените на ваш реальный URL

                } catch (error) {
                    console.error('Ошибка при отправке формы:', error);
                    alert('Не удалось отправить форму. Пожалуйста, попробуйте еще раз.');
                } finally {
                // Возвращаем кнопку в исходное состояние
                    confirmSubmitBtn.disabled = false;
                    confirmSubmitBtn.innerHTML = 'Отправить';
                }
            }
        });
    </script>

    <style>
        .question-item {
            padding: 1rem;
            border-radius: 0.5rem;
            transition: all 0.2s;
        }

            .question-item:hover {
                background-color: #f8f9fa;
            }

        .options-container {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .form-check {
            padding-left: 1.5em;
        }

        .form-check-input {
            margin-left: -1.5em;
        }

        /* Стили для Markdown контента */
        .card-text p:last-child {
            margin-bottom: 0;
        }

        .card-text ul, .card-text ol {
            padding-left: 1.5rem;
        }

        .card-text code {
            background-color: #f3f3f3;
            padding: 0.2rem 0.4rem;
            border-radius: 0.25rem;
            font-family: monospace;
        }

        /* Анимация для кнопок */
        .btn {
            transition: all 0.2s;
        }
    </style>
</body>