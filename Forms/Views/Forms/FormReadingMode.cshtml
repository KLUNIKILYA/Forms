@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<body>
    <div class="container py-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1>Просмотр формы</h1>
            <a href="javascript:history.back()" class="btn btn-outline-secondary">
                <i class="bi bi-arrow-left"></i> Назад
            </a>
        </div>

        <div class="card mb-4">
            <div class="card-body">
                <h2 class="card-title mb-3" id="formTitle">Название формы</h2>
                <div class="card-text mb-4" id="formDescription">
                    Описание формы будет здесь...
                </div>

                <div id="questionsContainer">
                    <div class="text-center py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Загрузка...</span>
                        </div>
                        <p class="mt-3">Загрузка формы...</p>
                    </div>
                </div>
            </div>
        </div>

        <div class="d-flex justify-content-start mt-4">
            <a href="javascript:history.back()" class="btn btn-outline-secondary">
                <i class="bi bi-arrow-left"></i> Назад
            </a>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const formTitle = document.getElementById('formTitle');
            const formDescription = document.getElementById('formDescription');
            const questionsContainer = document.getElementById('questionsContainer');

            let formData = {};

            loadFormData();

            async function loadFormData() {
                try {
                    const formId = getFormIdFromUrl();
                    const response = await fetch(`/api/Forms/PublicTemplate/${formId}`, {
                        headers: {
                            'Accept': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        if (response.status === 404) {
                            throw new Error(`Форма с ID ${formId} не найдена.`);
                        } else if (response.status === 403) {
                            throw new Error(`У вас нет доступа для просмотра этой формы.`);
                        }
                        throw new Error(`Ошибка загрузки: ${response.status}`);
                    }

                    const serverData = await response.json();
                    formData = {
                        title: serverData.template.title,
                        description: serverData.template.description,
                        questions: serverData.template.questions
                    };

                    renderReadOnlyForm();

                } catch (error) {
                    console.error('Ошибка загрузки формы:', error);
                    showErrorToUser(error.message || 'Не удалось загрузить форму.');
                }
            }

            function getFormIdFromUrl() {
                const pathParts = window.location.pathname.split('/');
                const lastPart = pathParts.filter(p => p).pop();
                return parseInt(lastPart, 10);
            }

            function renderReadOnlyForm() {
                formTitle.textContent = formData.title;
                formDescription.innerHTML = marked.parse(formData.description || "");
                questionsContainer.innerHTML = '';

                formData.questions.forEach(question => {
                    const questionElement = createReadOnlyQuestionElement(question);
                    questionsContainer.appendChild(questionElement);
                });
            }

            function createReadOnlyQuestionElement(question) {
                const questionDiv = document.createElement('div');
                questionDiv.className = 'mb-4 question-item';

                const questionLabel = document.createElement('label');
                questionLabel.className = 'form-label fw-bold';
                questionLabel.textContent = question.title;
                if (question.isRequired) {
                    questionLabel.innerHTML += ' <span class="text-danger">*</span>';
                }
                questionDiv.appendChild(questionLabel);

                if (question.description) {
                    const descriptionDiv = document.createElement('div');
                    descriptionDiv.className = 'text-muted small mb-2';
                    descriptionDiv.innerHTML = marked.parse(question.description);
                    questionDiv.appendChild(descriptionDiv);
                }

                const answerField = createReadOnlyAnswerField(question);
                questionDiv.appendChild(answerField);

                return questionDiv;
            }

            function createReadOnlyAnswerField(question) {
                switch (question.type) {
                    case 'SingleLine':
                    case 'Integer':
                        const pText = document.createElement('p');
                        pText.className = 'form-control-plaintext text-muted fst-italic';
                        pText.textContent = '_(Поле для ответа)_';
                        return pText;

                    case 'MultiLine':
                        const divTextarea = document.createElement('div');
                        divTextarea.className = 'form-control-plaintext text-muted fst-italic p-2';
                        divTextarea.style.border = '1px dashed #ced4da';
                        divTextarea.style.minHeight = '70px';
                        divTextarea.textContent = '_(Многострочное поле для ответа)_';
                        return divTextarea;

                    case 'Checkbox':
                        const checkContainer = document.createElement('div');
                        question.options.forEach((option, index) => {
                            const optionDiv = document.createElement('div');
                            optionDiv.className = 'form-check';

                            const input = document.createElement('input');
                            input.className = 'form-check-input';
                            input.type = 'checkbox';
                            input.id = `q${question.id}_opt${index}`;
                            input.disabled = true;

                            const label = document.createElement('label');
                            label.className = 'form-check-label';
                            label.htmlFor = input.id;
                            label.textContent = option;

                            optionDiv.appendChild(input);
                            optionDiv.appendChild(label);
                            checkContainer.appendChild(optionDiv);
                        });
                        return checkContainer;

                    case 'Dropdown':
                        const pSelect = document.createElement('p');
                        pSelect.className = 'form-control-plaintext text-muted fst-italic';
                        pSelect.textContent = `_(Выпадающий список с вариантами: ${question.options.join(', ')})_`;
                        return pSelect;

                    default:
                        const pDefault = document.createElement('p');
                        pDefault.className = 'form-control-plaintext text-muted fst-italic';
                        pDefault.textContent = '_(Поле для ответа)_';
                        return pDefault;
                }
            }

            function showErrorToUser(message) {
                questionsContainer.innerHTML = `
                    <div class="alert alert-danger">
                        <i class="bi bi-exclamation-triangle"></i> ${message}
                    </div>
                `;
            }
        });
    </script>
</body>